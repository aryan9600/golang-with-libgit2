---
name: 'Release static libraries'
on:
  push:
    tags:
      - '**'
  workflow_dispatch:
    inputs:
      tag:
        description: 'image tag prefix'
        default: 'rc'
        required: true

permissions:
  contents: write # needed to write releases
  id-token: write # needed for keyless signing

jobs:
  linux-x86_64-libgit2-only:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build static libraries - libgit2 only
        run: |
          TARGET_DIR=${GITHUB_WORKSPACE}/build/build_libgit2_only \
          BUILD_ROOT_DIR=${GITHUB_WORKSPACE}/libgit2/build/amd \
          ./hack/static.sh build_libgit2_only

          mkdir -p ./linux-libgit2-only/
          mv ${GITHUB_WORKSPACE}/build/build_libgit2_only/include ./linux-libgit2-only/
          mv ${GITHUB_WORKSPACE}/build/build_libgit2_only/lib ./linux-libgit2-only/

          tar -zcvf linux-x86_64-libgit2-only.tar.gz linux-libgit2-only
          rm -rf ${GITHUB_WORKSPACE}/build ${GITHUB_WORKSPACE}/libgit2
      - uses: actions/upload-artifact@v3
        with:
          name: release-artifact
          path: "*.tar.gz"
          if-no-files-found: error

  windows-x86_64-libgit2-only:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          release: false
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-cc mingw-w64-x86_64-cmake
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build static libraries - libgit2 only
        run: |
          whoami
          pwd
          TARGET_DIR=/d/a/golang-with-libgit2/golang-with-libgit2/build/build_libgit2_only \
          BUILD_ROOT_DIR=/d/a/golang-with-libgit2/golang-with-libgit2/libgit2/build/windows \
          ./hack/static.sh build_libgit2_only

          mkdir -p ./windows-libgit2-only/
          mv /d/a/golang-with-libgit2/golang-with-libgit2/build/build_libgit2_only/include ./windows-libgit2-only/
          mv /d/a/golang-with-libgit2/golang-with-libgit2/build/build_libgit2_only/lib ./windows-libgit2-only/

          tar -zcvf windows-x86_64-libgit2-only.tar.gz windows-libgit2-only
          rm -rf /d/a/golang-with-libgit2/golang-with-libgit2/build /d/a/golang-with-libgit2/golang-with-libgit2/libgit2
      - uses: actions/upload-artifact@v3
        with:
          name: release-artifact
          path: "*.tar.gz"
          if-no-files-found: error

  # similar to darwin-all-libs, but only compiles libgit2.
  darwin-libgit2-only:
    runs-on: macos-11
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build universal static libraries for Darwin - libgit2 only
        run: |
          TARGET_DIR=${GITHUB_WORKSPACE}/build/libgit2-darwin-amd64 \
          BUILD_ROOT_DIR=${GITHUB_WORKSPACE}/libgit2/build/amd \
          ./hack/static.sh build_libgit2_only

          TARGET_DIR=${GITHUB_WORKSPACE}/build/libgit2-darwin-arm64 \
          BUILD_ROOT_DIR=${GITHUB_WORKSPACE}/libgit2/build/arm \
          TARGET_ARCH=arm64 \
          CMAKE_APPLE_SILICON_PROCESSOR=arm64 \
          ./hack/static.sh build_libgit2_only

          LIBGIT2_WORKDIR_SED="s;${GITHUB_WORKSPACE}/build/libgit2-darwin-amd64;${GITHUB_WORKSPACE}/build/darwin-libgit2-only;g"
          LIBGIT2_XCODE_SED="s;-L/Applications/Xcode.* ;;g"
          LIBGIT2PC="${GITHUB_WORKSPACE}/build/libgit2-darwin-amd64/lib/pkgconfig/libgit2.pc"          

          # pkgconfig includes absolute paths that are specific to the runner machine. 
          # We need to remove the absolute path for iconv, so when the libgit2 library
          # is consumed pkgconfig will automatically try to find it through the default
          # search paths on the target machine.
          if command -v gsed &> /dev/null; then 
              gsed -i "${LIBGIT2_WORKDIR_SED}" "${LIBGIT2PC}"
              gsed -i "${LIBGIT2_XCODE_SED}" "${LIBGIT2PC}"
          else
              sed -i "" "${LIBGIT2_WORKDIR_SED}" "${LIBGIT2PC}"
              sed -i "" "${LIBGIT2_XCODE_SED}" "${LIBGIT2PC}"
          fi

          mkdir ./darwin-libgit2-only
          cp -r ${GITHUB_WORKSPACE}/build/libgit2-darwin-amd64/include ./darwin-libgit2-only/
          cp -r ${GITHUB_WORKSPACE}/build/libgit2-darwin-amd64/lib ./darwin-libgit2-only/

          libtool -static -o ./darwin-libgit2-only/lib/libgit2.a \
            ${GITHUB_WORKSPACE}/build/libgit2-darwin-amd64/lib/libgit2.a \
            ${GITHUB_WORKSPACE}/build/libgit2-darwin-arm64/lib/libgit2.a

          tar -zcvf darwin-libgit2-only.tar.gz darwin-libgit2-only
          rm -rf ${GITHUB_WORKSPACE}/build ${GITHUB_WORKSPACE}/libgit2
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.15
      - uses: actions/upload-artifact@v3
        with:
          name: release-artifact
          path: "*.tar.gz"
          if-no-files-found: error

  goreleaser:
    runs-on: ubuntu-latest
    needs:
      [
        linux-x86_64-libgit2-only,
        darwin-libgit2-only,
        windows-x86_64-libgit2-only
      ]
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: 1.19.x
      - name: Setup Cosign
        uses: sigstore/cosign-installer@main
      - name: Setup Syft
        uses: anchore/sbom-action/download-syft@v0
      - name: Download Files
        uses: actions/download-artifact@v3
        with:
          name: release-artifact
      - uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
