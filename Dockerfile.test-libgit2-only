# This Dockerfile builds and packages libgit2 only (not linked with openssl and libssh2); and tests it against git2go.

ARG BASE_VARIANT=alpine
ARG GO_VERSION=1.18
ARG XX_VERSION=1.1.2

FROM --platform=$BUILDPLATFORM tonistiigi/xx:${XX_VERSION} AS xx

FROM --platform=$BUILDPLATFORM ${BASE_VARIANT} AS build-base

RUN apk add --no-cache \
        bash \
        curl \
        build-base \
        linux-headers \
        perl \
        cmake \
        pkgconfig \
        gcc \
        musl-dev \
        clang \
        lld

COPY --from=xx / /

FROM build-base AS build-cross

ARG TARGETPLATFORM

RUN xx-apk add --no-cache \
        build-base \
        pkgconfig \
        gcc \
        musl-dev \
        clang \
        lld \
        llvm \
        linux-headers

WORKDIR /build
COPY hack/static.sh .

ENV CC=xx-clang
ENV CXX=xx-clang++

RUN ./static.sh build_libgit2_only

# trimmed removes all non necessary files (i.e. openssl binary).
FROM build-cross AS trimmed

ARG TARGETPLATFORM
RUN mkdir -p /trimmed/usr/local/$(xx-info triple)/ && \
        mkdir -p /trimmed/usr/local/$(xx-info triple)/share

RUN cp -r /usr/local/$(xx-info triple)/lib/ /trimmed/usr/local/$(xx-info triple)/ && \
        cp -r /usr/local/$(xx-info triple)/include/ /trimmed/usr/local/$(xx-info triple)/

FROM scratch as libs-arm64
COPY --from=trimmed /trimmed/ /

FROM scratch as libs-amd64
COPY --from=trimmed /trimmed/ /

FROM scratch as libs-armv7
COPY --from=trimmed /trimmed/ /

FROM libs-$TARGETARCH$TARGETVARIANT as libs

# Everything above this line is a copy from Dockefile.

FROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-${BASE_VARIANT} as gostable

FROM gostable AS go-linux

# Build-base consists of build platform dependencies and xx.
# These will be used at current arch to yield execute the cross compilations.
FROM go-${TARGETOS} AS go-base

RUN apk add clang lld pkgconfig

COPY --from=xx / /

# build-go-mod can still be cached at build platform architecture.
FROM go-base as build-go-mod

WORKDIR /root/smoketest
COPY tests/smoketest/go.mod .
COPY tests/smoketest/go.sum .
RUN go mod download

# Build stage install per target platform
# dependency and effectively cross compile the application.
FROM build-go-mod as build

ARG TARGETPLATFORM

# Some dependencies have to installed 
# for the target platform: https://github.com/tonistiigi/xx#go--cgo
RUN xx-apk add musl-dev gcc clang lld

WORKDIR /root/smoketest

COPY tests/smoketest/main.go .
COPY --from=libs /usr/local/ /usr/local/

ENV CGO_ENABLED=1
RUN export LIBRARY_PATH="/usr/local/$(xx-info triple)" && \
    export PKG_CONFIG_PATH="/usr/local/$(xx-info triple)/lib/pkgconfig" && \
    export FLAGS="$(pkg-config --static --libs --cflags libgit2)" && \
    export CGO_LDFLAGS="${FLAGS} -static" && \
    xx-go build  \
        -ldflags "-s -w" \
        -tags 'netgo,osusergo,static_build' \
        -o static-test-runner -trimpath main.go


# Ensure that the generated binary is valid for the target platform
RUN xx-verify --static static-test-runner

# This can be deployed into a gcr.io/distroless/static, however
# the alpine has been chosen so it can run the static application
# using the `RUN` statement.
FROM ${BASE_VARIANT}

RUN apk add git

WORKDIR /root/smoketest
COPY --from=build \
    /root/smoketest/static-test-runner .

ENV SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
ENV ALLOW_THREADLESS_LIBGIT2=true

RUN /root/smoketest/static-test-runner
